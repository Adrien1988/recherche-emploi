name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

concurrency:
  group: cd-main
  cancel-in-progress: true

jobs:
  deploy:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main') }}
    runs-on: ubuntu-latest

    env:
      IMAGE_TAG: ${{ github.event_name == 'workflow_dispatch' && github.sha || github.event.workflow_run.head_sha }}

      FLY_APP_NAME: ${{ secrets.FLY_APP_NAME }}
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      REMOTE_COMPOSE_PATH: ${{ secrets.REMOTE_COMPOSE_PATH }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      MAIL_SERVER: ${{ secrets.MAIL_SERVER }}
      MAIL_PORT: ${{ secrets.MAIL_PORT }}
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      MAIL_FROM: ${{ secrets.MAIL_FROM }}
      MAIL_TO: ${{ secrets.MAIL_TO }}
      MAIL_SECURE: ${{ secrets.MAIL_SECURE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ env.IMAGE_TAG }}

      - name: Compute lowercase image name (GHCR)
        id: img
        shell: bash
        run: |
          echo "image_name=ghcr.io/${GITHUB_REPOSITORY,,}" >> "$GITHUB_OUTPUT"

      - name: Locate Dockerfile (auto)
        id: dfile
        shell: bash
        run: |
          set -euo pipefail
          CANDIDATES=(
            "Dockerfile"
            "app/Dockerfile"
            "docker/Dockerfile"
            "docker/php/Dockerfile"
            "infrastructure/Dockerfile"
            "deploy/Dockerfile"
          )
          for p in "${CANDIDATES[@]}"; do
            if [ -f "$p" ]; then
              echo "path=$p" >> "$GITHUB_OUTPUT"
              # contexte = dossier du Dockerfile (ou '.' s'il est à la racine)
              dir="$(dirname "$p")"
              if [ "$dir" = "." ]; then dir="."; fi
              echo "context=$dir" >> "$GITHUB_OUTPUT"
              echo "Found Dockerfile at: $p (context: $dir)"
              exit 0
            fi
          done
          echo "Aucun Dockerfile trouvé aux emplacements connus." 1>&2
          echo "Crée un Dockerfile (ex: app/Dockerfile) ou adapte la liste des chemins." 1>&2
          exit 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: ${{ steps.dfile.outputs.context }}
          file: ${{ steps.dfile.outputs.path }}
          push: true
          tags: |
            ${{ steps.img.outputs.image_name }}:${{ env.IMAGE_TAG }}
            ${{ steps.img.outputs.image_name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ---------- Fly.io (optionnel) ----------
      - name: Deploy to Fly.io
        if: ${{ env.FLY_APP_NAME != '' && env.FLY_API_TOKEN != '' }}
        uses: superfly/flyctl-actions@v1
        with:
          args: deploy --app ${{ env.FLY_APP_NAME }} --image ${{ steps.img.outputs.image_name }}:${{ env.IMAGE_TAG }}
        env:
          FLY_API_TOKEN: ${{ env.FLY_API_TOKEN }}

      # ---------- VPS via SSH (optionnel) ----------
      - name: Deploy to VPS via SSH
        if: ${{ env.SSH_HOST != '' && env.SSH_USER != '' && env.REMOTE_COMPOSE_PATH != '' }}
        env:
          SSH_HOST: ${{ env.SSH_HOST }}
          SSH_USER: ${{ env.SSH_USER }}
          SSH_PORT: ${{ env.SSH_PORT || 22 }}
          REMOTE_COMPOSE_PATH: ${{ env.REMOTE_COMPOSE_PATH }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_NAME: ${{ steps.img.outputs.image_name }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "docker login ghcr.io -u $GITHUB_ACTOR -p $GITHUB_TOKEN"
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "docker pull $IMAGE_NAME:$IMAGE_TAG"
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "IMAGE=$IMAGE_NAME:$IMAGE_TAG docker compose -f $REMOTE_COMPOSE_PATH pull"
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "IMAGE=$IMAGE_NAME:$IMAGE_TAG docker compose -f $REMOTE_COMPOSE_PATH up -d"
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "docker image prune -f"

      # ---------- Notifications échec (optionnel) ----------
      - name: Notify failure to Slack
        if: ${{ failure() && env.SLACK_WEBHOOK_URL != '' }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"CD failed on $GITHUB_REPOSITORY@${{ env.IMAGE_TAG }} — run: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\"}" \
            "${{ env.SLACK_WEBHOOK_URL }}"

      - name: Notify failure by email
        if: ${{ failure() && env.MAIL_SERVER != '' && env.MAIL_FROM != '' && env.MAIL_TO != '' && env.MAIL_USERNAME != '' && env.MAIL_PASSWORD != '' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ env.MAIL_SERVER }}
          server_port: ${{ env.MAIL_PORT || 587 }}
          username: ${{ env.MAIL_USERNAME }}
          password: ${{ env.MAIL_PASSWORD }}
          subject: "CD failed: ${{ github.repository }} @ ${{ env.IMAGE_TAG }}"
          to: ${{ env.MAIL_TO }}
          from: ${{ env.MAIL_FROM }}
          secure: ${{ env.MAIL_SECURE || 'starttls' }}
          body: |
            CD failed.
            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
